// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2023 17:19:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab7
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab7_vlg_sample_tst(
	clk,
	switches,
	sampler_tx
);
input  clk;
input [7:0] switches;
output sampler_tx;

reg sample;
time current_time;
always @(clk or switches)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab7_vlg_check_tst (
	disp0,
	disp1,
	disp2,
	sampler_rx
);
input [6:0] disp0;
input [6:0] disp1;
input [6:0] disp2;
input sampler_rx;

reg [6:0] disp0_expected;
reg [6:0] disp1_expected;
reg [6:0] disp2_expected;

reg [6:0] disp0_prev;
reg [6:0] disp1_prev;
reg [6:0] disp2_prev;

reg [6:0] disp0_expected_prev;
reg [6:0] disp1_expected_prev;
reg [6:0] disp2_expected_prev;

reg [6:0] last_disp0_exp;
reg [6:0] last_disp1_exp;
reg [6:0] last_disp2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	disp0_prev = disp0;
	disp1_prev = disp1;
	disp2_prev = disp2;
end

// update expected /o prevs

always @(trigger)
begin
	disp0_expected_prev = disp0_expected;
	disp1_expected_prev = disp1_expected;
	disp2_expected_prev = disp2_expected;
end


// expected disp0[ 6 ]
initial
begin
	disp0_expected[6] = 1'bX;
end 
// expected disp0[ 5 ]
initial
begin
	disp0_expected[5] = 1'bX;
end 
// expected disp0[ 4 ]
initial
begin
	disp0_expected[4] = 1'bX;
end 
// expected disp0[ 3 ]
initial
begin
	disp0_expected[3] = 1'bX;
end 
// expected disp0[ 2 ]
initial
begin
	disp0_expected[2] = 1'bX;
end 
// expected disp0[ 1 ]
initial
begin
	disp0_expected[1] = 1'bX;
end 
// expected disp0[ 0 ]
initial
begin
	disp0_expected[0] = 1'bX;
end 
// expected disp1[ 6 ]
initial
begin
	disp1_expected[6] = 1'bX;
end 
// expected disp1[ 5 ]
initial
begin
	disp1_expected[5] = 1'bX;
end 
// expected disp1[ 4 ]
initial
begin
	disp1_expected[4] = 1'bX;
end 
// expected disp1[ 3 ]
initial
begin
	disp1_expected[3] = 1'bX;
end 
// expected disp1[ 2 ]
initial
begin
	disp1_expected[2] = 1'bX;
end 
// expected disp1[ 1 ]
initial
begin
	disp1_expected[1] = 1'bX;
end 
// expected disp1[ 0 ]
initial
begin
	disp1_expected[0] = 1'bX;
end 
// expected disp2[ 6 ]
initial
begin
	disp2_expected[6] = 1'bX;
end 
// expected disp2[ 5 ]
initial
begin
	disp2_expected[5] = 1'bX;
end 
// expected disp2[ 4 ]
initial
begin
	disp2_expected[4] = 1'bX;
end 
// expected disp2[ 3 ]
initial
begin
	disp2_expected[3] = 1'bX;
end 
// expected disp2[ 2 ]
initial
begin
	disp2_expected[2] = 1'bX;
end 
// expected disp2[ 1 ]
initial
begin
	disp2_expected[1] = 1'bX;
end 
// expected disp2[ 0 ]
initial
begin
	disp2_expected[0] = 1'bX;
end 
// generate trigger
always @(disp0_expected or disp0 or disp1_expected or disp1 or disp2_expected or disp2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected disp0 = %b | expected disp1 = %b | expected disp2 = %b | ",disp0_expected_prev,disp1_expected_prev,disp2_expected_prev);
	$display("| real disp0 = %b | real disp1 = %b | real disp2 = %b | ",disp0_prev,disp1_prev,disp2_prev);
`endif
	if (
		( disp0_expected_prev[0] !== 1'bx ) && ( disp0_prev[0] !== disp0_expected_prev[0] )
		&& ((disp0_expected_prev[0] !== last_disp0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp0_exp[0] = disp0_expected_prev[0];
	end
	if (
		( disp0_expected_prev[1] !== 1'bx ) && ( disp0_prev[1] !== disp0_expected_prev[1] )
		&& ((disp0_expected_prev[1] !== last_disp0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp0_exp[1] = disp0_expected_prev[1];
	end
	if (
		( disp0_expected_prev[2] !== 1'bx ) && ( disp0_prev[2] !== disp0_expected_prev[2] )
		&& ((disp0_expected_prev[2] !== last_disp0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp0_exp[2] = disp0_expected_prev[2];
	end
	if (
		( disp0_expected_prev[3] !== 1'bx ) && ( disp0_prev[3] !== disp0_expected_prev[3] )
		&& ((disp0_expected_prev[3] !== last_disp0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp0_exp[3] = disp0_expected_prev[3];
	end
	if (
		( disp0_expected_prev[4] !== 1'bx ) && ( disp0_prev[4] !== disp0_expected_prev[4] )
		&& ((disp0_expected_prev[4] !== last_disp0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp0_exp[4] = disp0_expected_prev[4];
	end
	if (
		( disp0_expected_prev[5] !== 1'bx ) && ( disp0_prev[5] !== disp0_expected_prev[5] )
		&& ((disp0_expected_prev[5] !== last_disp0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp0_exp[5] = disp0_expected_prev[5];
	end
	if (
		( disp0_expected_prev[6] !== 1'bx ) && ( disp0_prev[6] !== disp0_expected_prev[6] )
		&& ((disp0_expected_prev[6] !== last_disp0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp0_expected_prev);
		$display ("     Real value = %b", disp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp0_exp[6] = disp0_expected_prev[6];
	end
	if (
		( disp1_expected_prev[0] !== 1'bx ) && ( disp1_prev[0] !== disp1_expected_prev[0] )
		&& ((disp1_expected_prev[0] !== last_disp1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp1_exp[0] = disp1_expected_prev[0];
	end
	if (
		( disp1_expected_prev[1] !== 1'bx ) && ( disp1_prev[1] !== disp1_expected_prev[1] )
		&& ((disp1_expected_prev[1] !== last_disp1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp1_exp[1] = disp1_expected_prev[1];
	end
	if (
		( disp1_expected_prev[2] !== 1'bx ) && ( disp1_prev[2] !== disp1_expected_prev[2] )
		&& ((disp1_expected_prev[2] !== last_disp1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp1_exp[2] = disp1_expected_prev[2];
	end
	if (
		( disp1_expected_prev[3] !== 1'bx ) && ( disp1_prev[3] !== disp1_expected_prev[3] )
		&& ((disp1_expected_prev[3] !== last_disp1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp1_exp[3] = disp1_expected_prev[3];
	end
	if (
		( disp1_expected_prev[4] !== 1'bx ) && ( disp1_prev[4] !== disp1_expected_prev[4] )
		&& ((disp1_expected_prev[4] !== last_disp1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp1_exp[4] = disp1_expected_prev[4];
	end
	if (
		( disp1_expected_prev[5] !== 1'bx ) && ( disp1_prev[5] !== disp1_expected_prev[5] )
		&& ((disp1_expected_prev[5] !== last_disp1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp1_exp[5] = disp1_expected_prev[5];
	end
	if (
		( disp1_expected_prev[6] !== 1'bx ) && ( disp1_prev[6] !== disp1_expected_prev[6] )
		&& ((disp1_expected_prev[6] !== last_disp1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp1_expected_prev);
		$display ("     Real value = %b", disp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_disp1_exp[6] = disp1_expected_prev[6];
	end
	if (
		( disp2_expected_prev[0] !== 1'bx ) && ( disp2_prev[0] !== disp2_expected_prev[0] )
		&& ((disp2_expected_prev[0] !== last_disp2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp2_exp[0] = disp2_expected_prev[0];
	end
	if (
		( disp2_expected_prev[1] !== 1'bx ) && ( disp2_prev[1] !== disp2_expected_prev[1] )
		&& ((disp2_expected_prev[1] !== last_disp2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp2_exp[1] = disp2_expected_prev[1];
	end
	if (
		( disp2_expected_prev[2] !== 1'bx ) && ( disp2_prev[2] !== disp2_expected_prev[2] )
		&& ((disp2_expected_prev[2] !== last_disp2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp2_exp[2] = disp2_expected_prev[2];
	end
	if (
		( disp2_expected_prev[3] !== 1'bx ) && ( disp2_prev[3] !== disp2_expected_prev[3] )
		&& ((disp2_expected_prev[3] !== last_disp2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp2_exp[3] = disp2_expected_prev[3];
	end
	if (
		( disp2_expected_prev[4] !== 1'bx ) && ( disp2_prev[4] !== disp2_expected_prev[4] )
		&& ((disp2_expected_prev[4] !== last_disp2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp2_exp[4] = disp2_expected_prev[4];
	end
	if (
		( disp2_expected_prev[5] !== 1'bx ) && ( disp2_prev[5] !== disp2_expected_prev[5] )
		&& ((disp2_expected_prev[5] !== last_disp2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp2_exp[5] = disp2_expected_prev[5];
	end
	if (
		( disp2_expected_prev[6] !== 1'bx ) && ( disp2_prev[6] !== disp2_expected_prev[6] )
		&& ((disp2_expected_prev[6] !== last_disp2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp2_expected_prev);
		$display ("     Real value = %b", disp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_disp2_exp[6] = disp2_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab7_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] switches;
// wires                                               
wire [6:0] disp0;
wire [6:0] disp1;
wire [6:0] disp2;

wire sampler;                             

// assign statements (if any)                          
lab7 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.disp0(disp0),
	.disp1(disp1),
	.disp2(disp2),
	.switches(switches)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// switches[ 7 ]
initial
begin
	switches[7] = 1'b0;
	switches[7] = #220000 1'b1;
	switches[7] = #40000 1'b0;
end 
// switches[ 6 ]
initial
begin
	switches[6] = 1'b0;
	switches[6] = #240000 1'b1;
	switches[6] = #20000 1'b0;
end 
// switches[ 5 ]
initial
begin
	switches[5] = 1'b0;
	switches[5] = #240000 1'b1;
	switches[5] = #20000 1'b0;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
	switches[4] = #240000 1'b1;
	switches[4] = #20000 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
	switches[3] = #160000 1'b1;
	switches[3] = #60000 1'b0;
	switches[3] = #20000 1'b1;
	switches[3] = #20000 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
	switches[2] = #80000 1'b1;
	switches[2] = #80000 1'b0;
	switches[2] = #80000 1'b1;
	switches[2] = #20000 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
	switches[1] = #40000 1'b1;
	switches[1] = #40000 1'b0;
	switches[1] = #40000 1'b1;
	switches[1] = #40000 1'b0;
	switches[1] = #40000 1'b1;
	switches[1] = #20000 1'b0;
	switches[1] = #20000 1'b1;
	switches[1] = #20000 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
	switches[0] = #20000 1'b1;
	switches[0] = #20000 1'b0;
	switches[0] = #20000 1'b1;
	switches[0] = #20000 1'b0;
	switches[0] = #20000 1'b1;
	switches[0] = #20000 1'b0;
	switches[0] = #20000 1'b1;
	switches[0] = #20000 1'b0;
	switches[0] = #20000 1'b1;
	switches[0] = #20000 1'b0;
	switches[0] = #40000 1'b1;
	switches[0] = #20000 1'b0;
end 

lab7_vlg_sample_tst tb_sample (
	.clk(clk),
	.switches(switches),
	.sampler_tx(sampler)
);

lab7_vlg_check_tst tb_out(
	.disp0(disp0),
	.disp1(disp1),
	.disp2(disp2),
	.sampler_rx(sampler)
);
endmodule

